#Мезенцева Варвара Александровна 413787 R3143
RED = '\u001b[41m'
WHITE = '\u001b[47m'
BLACK = '\u001b[40m'
END = '\u001b[0m'


#№1 Флаг. Япония.
print("Флаг Японии")

for i in range(10):
    #Первые две и последние две строки
    if i == 0 or i ==8 or i == 1 or i ==9:
        print(f'{WHITE}{"   "*12}{END}')
    #Строки третья и восьмая
    if i ==2 or i ==7:
        print(f'{WHITE}{"   " * 4}{RED}{"   " * 4}{WHITE}{"   " * 4}{END}')
    #Строки четвертая и седьмая (ширина вполовину меньше чем в остальных строках для круглости)
    if i ==3 or i ==6:
        print(f'{WHITE}{"  " * 5}{RED}{"  " * 8}{WHITE}{"  " * 5}{END}')
     #Центральные строки
    if i == 4 or i == 5:
        print(f'{WHITE}{"   " * 3}{RED}{"   " * 6}{WHITE}{"   " * 3}{END}')



#№2 Узор. Вариант g.
print('\n')
print('Узор g')


def risunok(x,y):
    #В ris будем собирать готовый рисунок
    ris = ''
    for h in range(x):
        for w in range(y):
            #Сложная строчно-столбцовая формула для определения положения черных квадратов выведенная в процессе биения головой об стол
            if (w % 6 == 0) and (h - 3)%6 == 0:
                ris += f'{BLACK}{"   "}{END}'
            elif (h % 6 == 0) and (w - 3)%6 == 0:
                ris += f'{BLACK}{"   "}{END}'
            elif (w%3 !=0) and (w%2 == 0) and (h+1)%2 == 0 and (h-3)%3 != 0:
                ris += f'{BLACK}{"   "}{END}'
            elif (h%3 !=0) and (h%2 == 0) and (w+1)%2 == 0 and (w-3)%3 != 0:
                ris += f'{BLACK}{"   "}{END}'
            else:
                #Все остальное забивается белыми квадратами
                ris += f'{WHITE}{"   "}{END}'
            #По-хорошему, первые 4 строчки можно объединить в одну, но мне не нравится как это выглядит
        ris += '\n'
        #Для переноса строки
    return ris

#Работает на всех размерах!
print(risunok(13, 13))




#№3 График функции. y = 3x.

print('\n')
print('График функции y = 3x')


#Задаем количество строк 12 на график + 1 на оформление
for i in range (14):
    #Заполняем строки, не делящиеся на 3, в них нет целочисленных точек, поэтому только оси координат и пробелы
    if i%3 != 0:
        if 2 < i < 13:
            # Для чисел из одного символа добавляем перед чертой пробел
            print(12-i, ' |')
        elif i < 13:
            # Для чисел из двух символов только черта
             print(12 - i, '|')
        elif i == 13:
            #Ось Х
            print('    _____________________')
            print('      0 1 2 3 4 5 6 7 8 9')
    else:
        #Заполняем строки с точками, их координата по х = у/3
        if 2 < i < 13:
            print(12-i, ' |', '  '*((12-i)//3), '*')
        elif i < 13:
             print(12 - i, '|', '  '*((12-i)//3), '*')



#№4 Диаграмма. Числа больше -5 и меньше -5, положительные отбросить.


print('\n')
print('Диаграмма. Количество чисел больше -5 и меньше -5', '\n')

#Перенесение отрицательных значений из файла в список
file = open('sequence.txt')
list = []
for number in file:
    if float(number) < 0:
     list.append(float(number))
file.close()

#Счетчики чисел k>-5 и n<-5
k=0
n=0

for number in list:
        if number > -5:
            k+=1
        else:
            n+=1

#Визуализация
print('> -5', f'{WHITE}{" " * int(k/(k+n)*100)}{END}', '\n')
print('< -5', f'{WHITE}{" " * int(n/(k+n)*100)}{END}')
